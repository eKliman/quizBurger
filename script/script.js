//event handler that keeps track of contant downloads
document.addEventListener('DOMContentLoaded', function () {
  'use strict';
  // function summNumbers(a, b) {
  //   return a + b;
  // }

  // const summNumbers2 = function (a, b) {
  //   return a + b;
  // };

  // const summNumbers3 = (a, b) => {
  //   return a + b;
  // };

  // console.log(summNumbers(2, 3));

  // setTimeout(function () {
  //   console.log('Hi!');
  // }, 3000);

  // function animate() {
  //   console.log('Hi!');
  // }
  // setTimeout(animate, 3000);
  // setInterval(animate, 3000);

  const btnOpenModal = document.querySelector('#btnOpenModal');
  const modalBlock = document.querySelector('#modalBlock');
  const closeModal = document.querySelector('#closeModal');
  const questionTitle = document.querySelector('#question');
  const formAnswers = document.querySelector('#formAnswers');
  const burgerBtn = document.getElementById('burger');
  const nextButton = document.querySelector('#next');
  const prevButton = document.querySelector('#prev');
  const sendButton = document.querySelector('#send');
  const modalDialog = document.querySelector('.modal-dialog');
  const modalTitle = document.querySelector('.modal-title');

  // Your web app's Firebase configuration
  const firebaseConfig = {
    apiKey: 'AIzaSyD_tp08UarcEtMi5PlHz3T0-PQEqJgp6zs',
    authDomain: 'quiz-burger-a6f69.firebaseapp.com',
    databaseURL: 'https://quiz-burger-a6f69.firebaseio.com',
    projectId: 'quiz-burger-a6f69',
    storageBucket: 'quiz-burger-a6f69.appspot.com',
    messagingSenderId: '309086854547',
    appId: '1:309086854547:web:4dab76b003bc09b1165c66',
    measurementId: 'G-PHLHKSDLVV',
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);

  //data capture function
  const getData = () => {
    // formAnswers.textContent = 'LOAD';
    formAnswers.innerHTML = `<div class="loadingio-spinner-spinner-7r5r9y9ba0n"><div class="ldio-s13a60rexd">
    <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>
    </div></div>
    <style type="text/css">
    @keyframes ldio-s13a60rexd {
      0% { opacity: 1 }
      100% { opacity: 0 }
    }
    .ldio-s13a60rexd div {
      left: 59.800000000000004px;
      top: 11.05px;
      position: absolute;
      animation: ldio-s13a60rexd linear 1s infinite;
      background: #262323;
      width: 10.4px;
      height: 29.900000000000002px;
      border-radius: 5.2px / 12.857000000000001px;
      transform-origin: 5.2px 53.95px;
    }.ldio-s13a60rexd div:nth-child(1) {
      transform: rotate(0deg);
      animation-delay: -0.9166666666666666s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(2) {
      transform: rotate(30deg);
      animation-delay: -0.8333333333333334s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(3) {
      transform: rotate(60deg);
      animation-delay: -0.75s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(4) {
      transform: rotate(90deg);
      animation-delay: -0.6666666666666666s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(5) {
      transform: rotate(120deg);
      animation-delay: -0.5833333333333334s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(6) {
      transform: rotate(150deg);
      animation-delay: -0.5s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(7) {
      transform: rotate(180deg);
      animation-delay: -0.4166666666666667s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(8) {
      transform: rotate(210deg);
      animation-delay: -0.3333333333333333s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(9) {
      transform: rotate(240deg);
      animation-delay: -0.25s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(10) {
      transform: rotate(270deg);
      animation-delay: -0.16666666666666666s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(11) {
      transform: rotate(300deg);
      animation-delay: -0.08333333333333333s;
      background: #262323;
    }.ldio-s13a60rexd div:nth-child(12) {
      transform: rotate(330deg);
      animation-delay: 0s;
      background: #262323;
    }
    .loadingio-spinner-spinner-7r5r9y9ba0n {
      width: 130px;
      height: 130px;
      display: inline-block;
      overflow: hidden;
      background: none;
    }
    .ldio-s13a60rexd {
      width: 100%;
      height: 100%;
      position: relative;
      transform: translateZ(0) scale(1);
      backface-visibility: hidden;
      transform-origin: 0 0; /* see note above */
    }
    .ldio-s13a60rexd div { box-sizing: content-box; }
    /* generated by https://loading.io/ */
    </style>`;

    setTimeout(() => {
      firebase
        .database()
        .ref()
        .child('questions')
        .once('value')
        .then((snap) => playTest(snap.val()));
      // fetch('./questions.json')
      //   .then((res) => res.json())
      //   .then((obj) => playTest(obj.questions))
      //   .catch((err) => {
      //     formAnswers.textContent = 'Ошибка загрузки данных!';
      //     console.error(err);
      //   });
    }, 1000);
  };

  let clientWidth = document.documentElement.clientWidth;
  let count = -100;

  //modal window display condition
  if (clientWidth < 768) {
    burgerBtn.style.display = 'flex';
  } else {
    burgerBtn.style.display = 'none';
  }
  modalDialog.style.top = count + '%';

  //pop-up animation of modal window
  const animateModal = () => {
    modalDialog.style.top = count + '%';
    count += 3;

    if (count < 0) {
      requestAnimationFrame(animateModal);
    } else {
      count = -100;
    }
  };

  //test start function
  const playTest = (questions) => {
    const finalAnswers = [];
    const obj = {};
    //question number variable
    let numberQuestion = 0;
    modalTitle.classList.remove('d-none');
    //rendering answers function
    const renderAnswers = (index) => {
      questions[index].answers.forEach((answer) => {
        const answerItem = document.createElement('div');
        answerItem.classList.add(
          'answers-item',
          'd-flex',
          'justify-content-center'
        );
        answerItem.innerHTML = `
          <input type="${questions[index].type}" id="${answer.title}" name="answer" class="d-none" value="${answer.title}">
          <label for="${answer.title}" class="d-flex flex-column justify-content-between">
            <img class="answerImg" src="${answer.url}" alt="burger">
            <span>${answer.title}</span>
          </label>
        `;
        formAnswers.appendChild(answerItem);
      });
    };

    //rendering questions function + launch rendering answers function
    const renderQuestions = (indexQuestion) => {
      formAnswers.innerHTML = '';
      if (numberQuestion >= 0 && numberQuestion <= questions.length - 1) {
        questionTitle.textContent = `${questions[indexQuestion].question}`;
        renderAnswers(indexQuestion);
        prevButton.style.visibility = 'visible';
        nextButton.style.visibility = 'visible';
        nextButton.disabled = true;
        sendButton.classList.add('d-none');
      }
    };

    renderQuestions(numberQuestion);

    const checkAnswer = () => {
      const inputs = [...formAnswers.elements].filter(
        (input) => input.checked || input.id === 'numberPhone'
      );
      inputs.forEach((input, index) => {
        if (numberQuestion >= 0 && numberQuestion <= questions.length - 1) {
          obj[`${index}_${questions[numberQuestion].question}`] = input.value;
        }
        if (numberQuestion === questions.length) {
          obj['Номер телефона'] = input.value;
        }
      });
      // finalAnswers.push(obj);
    };

    const checkNumber = () => {
      switch (numberQuestion) {
        case 0:
          prevButton.style.visibility = 'hidden';
          break;
        case questions.length:
          nextButton.style.visibility = 'hidden';
          prevButton.style.visibility = 'hidden';
          sendButton.classList.remove('d-none');
          sendButton.disabled = true;
          questionTitle.textContent = '';
          modalTitle.classList.add('d-none');
          formAnswers.innerHTML = `
          <div class="form-group">
            <label for="numberPhone">Введите свой номер телефона</label>
            <input type="phone" class="form-control" id="numberPhone">
          </div>
          `;

          const numberPhone = document.getElementById('numberPhone');
          numberPhone.addEventListener('input', (event) => {
            event.target.value = event.target.value.replace(/[^0-9+-]/, '');
          });
          break;
        case questions.length + 1:
          formAnswers.textContent = 'Спасибо за пройденный тест!';
          sendButton.classList.add('d-none');

          for (let key in obj) {
            let newObj = {};
            newObj[key] = obj[key];
            finalAnswers.push(newObj);
          }

          setTimeout(() => {
            modalBlock.classList.remove('d-block');
          }, 2000);
          break;
      }
    };

    checkNumber();

    //event handlers for the next and prev buttons
    nextButton.onclick = () => {
      checkAnswer();
      numberQuestion++;
      renderQuestions(numberQuestion);
      checkNumber();
    };
    prevButton.onclick = () => {
      numberQuestion--;
      renderQuestions(numberQuestion);
      checkNumber();
    };

    sendButton.onclick = () => {
      checkAnswer();
      numberQuestion++;
      renderQuestions(numberQuestion);
      checkNumber();
      firebase.database().ref().child('contacts').push(finalAnswers);
    };
  };

  // console.log(btnOpenModal);
  // console.dir(btnOpenModal);

  // btnOpenModal.onclick = function () {
  //   console.log('firstClick');
  // };

  //event handler to track changes in window width and display/hide the burger menu
  window.addEventListener('resize', function () {
    clientWidth = document.documentElement.clientWidth;
    if (clientWidth < 768) {
      burgerBtn.style.display = 'flex';
    } else {
      burgerBtn.style.display = 'none';
    }
  });

  //modal window open/close event handler
  burgerBtn.addEventListener('click', () => {
    requestAnimationFrame(animateModal);
    burgerBtn.classList.add('active');
    modalBlock.classList.add('d-block');
    getData();
  });

  btnOpenModal.addEventListener('click', () => {
    requestAnimationFrame(animateModal);
    burgerBtn.classList.add('active');
    modalBlock.classList.add('d-block');
    getData();
  });

  closeModal.addEventListener('click', () => {
    modalBlock.classList.remove('d-block');
    burgerBtn.classList.remove('active');
  });

  document.addEventListener('click', function (event) {
    if (
      !event.target.closest('.modal-dialog') &&
      !event.target.closest('.openModalButton') &&
      !event.target.closest('.burger')
    ) {
      modalBlock.classList.remove('d-block');
      burgerBtn.classList.remove('active');
    }
  });

  formAnswers.addEventListener('click', function (event) {
    if (event.target.closest('input')) {
      nextButton.disabled = false;
      sendButton.disabled = false;
    }
  });
});
